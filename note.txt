1. Lancer la migration initiale
npx prisma migrate dev --name init


ðŸ‘‰ Ã‡a va :

CrÃ©er les tables dans wecci_db selon ton schema.prisma.

GÃ©nÃ©rer un fichier de migration dans prisma/migrations.

Mettre Ã  jour la table interne _prisma_migrations.

2. GÃ©nÃ©rer le client Prisma
npx prisma generate


ðŸ‘‰ Ã‡a va gÃ©nÃ©rer le Prisma Client (dans node_modules/@prisma/client).

3. VÃ©rifier la base

Tu peux tester si la migration a bien marchÃ© avec :

npx prisma studio


ðŸ‘‰ Ã‡a ouvre une interface web pour naviguer dans ta DB.


username:dieng0097_db_user
password:AMeBE2h5Pu1xPDk7
mongodb+srv://dieng0097_db_user:AMeBE2h5Pu1xPDk7@cluster0.w6u76du.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0


const { MongoClient, ServerApiVersion } = require('mongodb');
const uri = "mongodb+srv://dieng0097_db_user:AMeBE2h5Pu1xPDk7@cluster0.w6u76du.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";

// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});

async function run() {
  try {
    // Connect the client to the server	(optional starting in v4.7)
    await client.connect();
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log("Pinged your deployment. You successfully connected to MongoDB!");
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
  }
}
run().catch(console.dir);
